use std::fmt::Debug;
use std::ops::Deref;

use crate::{Bearing, Coordinate, DirectedGraph, EncoderConfig, EncoderError, Length};

#[derive(Debug, Clone, PartialEq)]
pub struct LocRefPoints<EdgeId> {
    pub lrps: Vec<LocRefPoint<EdgeId>>,
    pub pos_offset: Length,
    pub neg_offset: Length,
}

impl<EdgeId> Deref for LocRefPoints<EdgeId> {
    type Target = Vec<LocRefPoint<EdgeId>>;
    fn deref(&self) -> &Self::Target {
        &self.lrps
    }
}

impl<EdgeId> From<Vec<LocRefPoint<EdgeId>>> for LocRefPoints<EdgeId> {
    fn from(lrps: Vec<LocRefPoint<EdgeId>>) -> Self {
        Self {
            lrps,
            pos_offset: Length::ZERO,
            neg_offset: Length::ZERO,
        }
    }
}

/// Location Reference Point (LRP) generated by the encoder during the resolver step.
/// Includes the line being represented by this LRP and the shortest-path to the next LRP.
#[derive(Debug, Clone, PartialEq)]
pub struct LocRefPoint<EdgeId> {
    /// The (non-empty) shortest path to the next LRP.
    /// The line the LRP refers to is the first edge of the path.
    pub path: Vec<EdgeId>,
    /// The LRP coordinate.
    pub coordinate: Coordinate,
    /// True only if this is the last LRP of the location.
    pub is_last: bool,
    /// The bearing of the LRP line.
    pub bearing: Bearing,
}

impl<EdgeId: Copy> LocRefPoint<EdgeId> {
    /// Constructs a new LRP based on a node.
    pub fn from_node<G>(
        config: &EncoderConfig,
        graph: &G,
        path: Vec<EdgeId>,
    ) -> Result<Self, EncoderError>
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        Self::new(config, graph, path, false).ok_or(EncoderError::LrpConstructionFailed)
    }

    /// Constructs a new LRP based on the last node.
    pub fn from_last_node<G>(
        config: &EncoderConfig,
        graph: &G,
        edge: EdgeId,
    ) -> Result<Self, EncoderError>
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        Self::new(config, graph, vec![edge], true).ok_or(EncoderError::LrpConstructionFailed)
    }

    /// Returns the distance to the next LRP.
    pub fn length<G>(&self, graph: &G) -> Length
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        self.path
            .iter()
            .filter_map(|&e| graph.get_edge_length(e))
            .sum()
    }

    fn new<G>(
        config: &EncoderConfig,
        graph: &G,
        mut path: Vec<EdgeId>,
        is_last: bool,
    ) -> Option<Self>
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        let lrp = if is_last {
            let edge = path.pop()?;
            let coordinate = graph.get_vertex_coordinate(graph.get_edge_end_vertex(edge)?)?;
            let projection = graph.get_edge_length(edge)?;

            let bearing_distance = config.bearing_distance.reverse();
            let bearing = graph.get_edge_bearing_between(edge, projection, bearing_distance)?;

            Self {
                path,
                coordinate,
                is_last,
                bearing,
            }
        } else {
            let edge = *path.first()?;
            let coordinate = graph.get_vertex_coordinate(graph.get_edge_start_vertex(edge)?)?;
            let projection = Length::ZERO;

            let bearing_distance = config.bearing_distance;
            let bearing = graph.get_edge_bearing_between(edge, projection, bearing_distance)?;

            Self {
                path,
                coordinate,
                is_last,
                bearing,
            }
        };

        Some(lrp)
    }
}

impl<EdgeId: Copy + Debug> LocRefPoints<EdgeId> {
    /// Trim the LRPs according to the positive and negative offsets.
    pub fn trim<G>(mut self, config: &EncoderConfig, graph: &G) -> Result<Self, EncoderError>
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        self.lrps.reverse();
        while let Some(lrp) = self.lrps.last()
            && self.pos_offset >= lrp.length(graph)
        {
            self.pos_offset -= lrp.length(graph);
            self.lrps.pop();
        }
        self.lrps.reverse();

        while let Some(lrp) = self.lrps.iter().rev().nth(1)
            && self.neg_offset >= lrp.length(graph)
        {
            self.neg_offset -= lrp.length(graph);
            self.lrps.pop();
        }

        if self.lrps.len() < 2 {
            return Err(EncoderError::LrpOffsetTrimmingFailed);
        }

        let mut lrps_rev = self.lrps.iter_mut().rev();
        if let Some(last_lrp) = lrps_rev.next().filter(|lrp| !lrp.is_last)
            && let Some(&last_edge) = lrps_rev.next().and_then(|lrp| lrp.path.last())
        {
            *last_lrp = LocRefPoint::from_last_node(config, graph, last_edge)?;
        }

        Ok(self)
    }
}
