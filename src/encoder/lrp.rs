use crate::{Bearing, Coordinate, DirectedGraph, EncoderConfig, EncoderError, Length};

/// Location Reference Point (LRP) generated by the encoder during the resolver step.
/// Includes the line being represented by this LRP and the shortest-path to the next LRP.
#[derive(Debug, Clone, PartialEq)]
pub struct LocRefPoint<EdgeId> {
    /// The (non-empty) shortest path to the next LRP.
    /// The line the LRP refers to is the first edge of the path.
    pub path: Vec<EdgeId>,
    /// The LRP coordinate.
    pub coordinate: Coordinate,
    /// True only if this is the last LRP of the location.
    pub is_last: bool,
    /// The bearing of the LRP line.
    pub bearing: Bearing,
}

impl<EdgeId: Copy> LocRefPoint<EdgeId> {
    /// Constructs a new LRP based on a node.
    pub fn from_node<G>(
        config: &EncoderConfig,
        graph: &G,
        path: Vec<EdgeId>,
    ) -> Result<Self, EncoderError>
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        Self::new(config, graph, path, false).ok_or(EncoderError::LrpConstructionFailed)
    }

    /// Constructs a new LRP based on the last node.
    pub fn from_last_node<G>(
        config: &EncoderConfig,
        graph: &G,
        edge: EdgeId,
    ) -> Result<Self, EncoderError>
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        Self::new(config, graph, vec![edge], true).ok_or(EncoderError::LrpConstructionFailed)
    }

    /// Returns the distance to the next LRP.
    pub fn length<G>(&self, graph: &G) -> Length
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        self.path
            .iter()
            .filter_map(|&e| graph.get_edge_length(e))
            .sum()
    }

    fn new<G>(
        config: &EncoderConfig,
        graph: &G,
        mut path: Vec<EdgeId>,
        is_last: bool,
    ) -> Option<Self>
    where
        G: DirectedGraph<EdgeId = EdgeId>,
    {
        let lrp = if is_last {
            let edge = path.pop()?;
            let coordinate = graph.get_vertex_coordinate(graph.get_edge_end_vertex(edge)?)?;
            let projection = graph.get_edge_length(edge)?;

            let bearing_distance = config.bearing_distance.reverse();
            let bearing = graph.get_edge_bearing_between(edge, projection, bearing_distance)?;

            Self {
                path,
                coordinate,
                is_last,
                bearing,
            }
        } else {
            let edge = *path.first()?;
            let coordinate = graph.get_vertex_coordinate(graph.get_edge_start_vertex(edge)?)?;
            let projection = Length::ZERO;

            let bearing_distance = config.bearing_distance;
            let bearing = graph.get_edge_bearing_between(edge, projection, bearing_distance)?;

            Self {
                path,
                coordinate,
                is_last,
                bearing,
            }
        };

        Some(lrp)
    }
}
